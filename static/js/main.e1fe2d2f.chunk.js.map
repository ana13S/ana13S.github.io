{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WebFont","load","google","families","options","skillList","projectList","title","link","Option","props","className","onClick","value","NavigationBar","console","log","optionNum","updateContent","map","element","renderOption","this","renderAllOptions","React","Component","Content","s","class","obj","href","currentOption","src","alt","width","height","initializeSkill","initializeProject","type","App","state","bind","i","setState","document","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yQAIAA,EAAQC,KAAK,CACXC,OAAQ,CACNC,SAAU,CAAC,UAAW,aAI1B,IAAIC,EAAU,CAAC,WAAY,SAAU,WAAY,UAC7CC,EAAY,CAAC,aAAc,QAAS,SAAU,OAAQ,MAAO,KAAM,UAAW,SAC9EC,EAAc,CAAC,CAACC,MAAO,+BAC3BC,KAAM,yDACN,CAACD,MAAO,qBACRC,KAAM,2CACN,CAACD,MAAO,cACRC,KAAM,4CACN,CAACD,MAAO,YACRC,KAAM,sCACN,CAACD,MAAO,oBACRC,KAAM,qDAIN,SAASC,EAAOC,GACd,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SAAUR,EAAQM,EAAMG,Q,IAIhEC,E,kDACJ,WAAYJ,GAAQ,IAAD,6BACjB,cAAMA,GACNK,QAAQC,IAAI,EAAKN,OAFA,E,yDAKNO,GAAY,IAAD,OACtB,OACE,kBAACR,EAAD,CACEI,MAAOI,EACPL,QAAS,kBAAM,EAAKF,MAAMQ,cAAcD,Q,yCAI1B,IAAD,OACjB,MAAO,CAAC,EAAG,EAAG,EAAG,GAAGE,KAAI,SAACC,GAAD,OAAa,EAAKC,aAAaD,Q,+BAIvD,OACE,6BACE,yBAAKT,UAAU,kBACVW,KAAKC,yB,GAtBUC,IAAMC,WA+B5BC,E,8KAEYC,GACd,OAAQ,6BAAK,wBAAIC,MAAM,SAASD,M,wCAGhBE,GAChB,OAAQ,6BAAK,wBAAID,MAAM,WAAU,uBAAGE,KAAMD,EAAIrB,MAAOqB,EAAItB,W,+BAGjD,IAAD,OACP,OAAQe,KAAKZ,MAAMqB,eACjB,KAAK,EACH,OAAQ,yBAAKpB,UAAU,WACrB,yBAAKA,UAAU,YACb,yBAAKqB,IAA6B,uBAAwBC,IAAI,WAAWC,MAAM,MAAMC,OAAO,SAE9F,yBAAKxB,UAAU,SAAf,MAEE,qGACA,mNACA,qOACA,yNAIN,KAAK,EACH,OAAS,yBAAKA,UAAU,WACpB,wBAAIA,UAAU,QACXN,EAAUc,KAAI,SAAAC,GAAO,OAAI,EAAKgB,gBAAgBhB,QAIvD,KAAK,EACD,OACA,yBAAKT,UAAU,WACb,wBAAIA,UAAU,QACXL,EAAYa,KAAI,SAACC,GAAD,OAAa,EAAKiB,kBAAkBjB,QAK7D,KAAK,EACD,OACA,yBAAKT,UAAU,WACZ,2BAAOqB,IAA6B,qBAAsBM,KAAK,kBAAkBJ,MAAM,OAAOC,OAAO,WAI9G,QACE,OAAO,U,GAlDSX,IAAMC,WAgFbc,E,kDAxBb,WAAY7B,GAAQ,IAAD,8BACjB,cAAMA,IACD8B,MAAQ,CACXT,cAAe,GAEjB,EAAKb,cAAgB,EAAKA,cAAcuB,KAAnB,gBALJ,E,0DAQLC,GACZpB,KAAKqB,SAAS,CAACZ,cAAeW,M,+BAK9B,OADAE,SAASrC,MAAQ,gBAEf,yBAAKI,UAAU,OACb,kBAAC,EAAD,CAAeoB,cAAeT,KAAKkB,MAAMT,cACvCb,cAAeI,KAAKJ,gBACtB,kBAAC,EAAD,CAASa,cAAeT,KAAKkB,MAAMT,qB,GAnBzBP,IAAMC,WCzGJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFR,SAASS,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.e1fe2d2f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport WebFont from 'webfontloader';\n\nWebFont.load({\n  google: {\n    families: ['Sahitya', 'Ruluko']\n  }\n});\n\nvar options = [\"ABOUT ME\", \"SKILLS\", \"PROJECTS\", \"RESUME\"]\nvar skillList = [\"Javascript\", \"React\", \"Python\", \"Java\", \"C++\", \"C#\", \"Node.js\", \"Swift\"]\nvar projectList = [{title: \"Road Conditions vs Accidents\",\nlink: \"https://ana13s.github.io/road-condition-vs-accidents/\"},\n{title: \"Live Coding Editor\",\nlink: \"https://github.com/ana13S/monaco-editor\"},\n{title: \"95 Defender\",\nlink: \"https://github.com/ana13S/95defender-api\"},\n{title: \"Level Up!\",\nlink: \"https://mycscourses-438b9.web.app/\"},\n{title: \"Komrade's Kitchen\",\nlink: \"https://cse125.ucsd.edu/2020/cse125g2/wordpress/\"}\n]\n\n\nfunction Option(props) {\n  return (\n    <button className=\"option\" onClick={props.onClick}>{options[props.value]}</button>\n  );\n}\n\nclass NavigationBar extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props);\n  }\n\n  renderOption(optionNum) {\n    return (\n      <Option\n        value={optionNum}\n        onClick={() => this.props.updateContent(optionNum)}/>\n    );\n  }\n\n  renderAllOptions() {\n    return [0, 1, 2, 3].map((element) => this.renderOption(element))\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"Navigation-bar\">\n            {this.renderAllOptions()}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nclass Content extends React.Component {\n\n  initializeSkill(s) {\n    return (<div><li class=\"skill\">{s}</li></div>);\n  }\n\n  initializeProject(obj) {\n    return (<div><li class=\"project\"><a href={obj.link}>{obj.title}</a></li></div>);\n  }\n\n  render() {\n    switch (this.props.currentOption) {\n      case 0: {\n        return (<div className=\"content\">\n          <div className=\"portrait\">\n            <img src={process.env.PUBLIC_URL+ '/assets/Portrait.jpg'} alt=\"portrait\" width=\"526\" height=\"508\"></img>\n          </div>\n          <div className=\"about\">\n            Hi,\n            <p> Iâ€™m Ana, senior undergraduate studying Computer Science in UCSD.</p>\n            <p> I'm currently working in a Live Coding Computing Education Research (CER) lab with Professor Adalbert Gerald Soosaj Raj and Professor Sorin Lerner's Live Programming research lab.</p>\n            <p> I currently have an unpublished paper systematically reviewing the literature on Live Coding at ITiCSE 2021 (first author with the awesome guidance of Professor Gerald and Professor Porter at UCSD)</p>\n            <p> In Winter 2021, I worked as a Teaching Assistant for CSE 291/190 (Introduction to CER). In Fall 2019 and Fall 2020, I worked as a tutor for CSE 120 (Introduction to Operating Systems)</p>\n          </div>\n        </div>);\n      }\n      case 1: {\n        return ( <div className=\"content\">\n            <ul className=\"list\">\n              {skillList.map(element => this.initializeSkill(element))}\n            </ul>\n        </div>);\n      }\n      case 2: {\n          return (\n          <div className=\"content\">\n            <ul className=\"list\">\n              {projectList.map((element) => this.initializeProject(element))}\n            </ul>\n          </div>\n        );\n          }\n      case 3: {\n          return (\n          <div className=\"content\">\n             <embed src={process.env.PUBLIC_URL+ '/assets/Resume.pdf'} type=\"application/pdf\" width=\"100%\" height=\"800px\"/>\n          </div>\n        );\n          }\n    default:\n      return null;\n    }\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentOption: 0\n    };\n    this.updateContent = this.updateContent.bind(this);\n  }\n\n  updateContent(i) {\n    this.setState({currentOption: i});\n  }\n\n  render() {\n    document.title = \"Ana's Website\"\n    return (\n      <div className=\"App\">\n        <NavigationBar currentOption={this.state.currentOption}\n          updateContent={this.updateContent}/>\n        <Content currentOption={this.state.currentOption}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}